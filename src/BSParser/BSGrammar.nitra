namespace BSParser
{
  syntax module BSGrammar
  {
    using PrettyPrint;
    using Outline;
    using TokenNames;
    using StandardSpanClasses;
    using Whitespaces;
    using Identifiers;
    using Statements;

    [StartRule]
    syntax CompilationUnit = TopLevelDeclaration* !Any;

    [Identifier]
    token Identifier = !Keyword IdentifierBody;

    [Keyword]
    token Keyword = Name=KeywordToken !IdentifierPartCharacters;

    regex KeywordToken =   "echo" | "unless"
                         | "class" | "function";

    regex GreekSemicolonQuestionThing = ";";
    regex ParameterPrefix = "€";
    regex BooleanLiteral = "true" | "false";

    alias Name = Identifier;
    alias BooleanExpression = Expression;

    syntax Expression
    {
      | BooleanLiteral;
    }

    syntax TopLevelDeclaration
    {
        | Class                      = "class" sm Name ":" TypeBody;
    }

    syntax TypeBody = outline_begin_before inl ClassMemberDeclaration* d nl outline_end_before;
    
    syntax ClassMemberDeclaration
    {
        | Function      = Modifiers "function" FunctionHeader Body;
        | Constructor   = Modifiers "function" sm "__construct" " (" FunctionParameters? ")" Body;
    }

    syntax HaltAndCatchFire = Space Space "HALT_AND_CATCH_FIRE" inl Space Space "(" "unless" BooleanExpression ")" nl;

    syntax FunctionHeader = sm Name "(" FunctionParameters? ")";

    syntax FunctionParameter  = ParameterPrefix Name;
    syntax FunctionParameters = FunctionParameter ("," sm FunctionParameter)*;

    syntax Body
    {
      | Block = outline_begin_before inl Statement* d GreekSemicolonQuestionThing? nl outline_end_before;
      | Empty = inl GreekSemicolonQuestionThing nl;
    }

    syntax Statement
    {
      | Exception         = HaltAndCatchFire;
    }

    syntax Modifiers = Modifier*;

    syntax Modifier
    {
      | Public    = "public"sm;
    }
  }
}
