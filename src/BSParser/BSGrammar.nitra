namespace BSParser
{
  syntax module BSGrammar
  {
    using PrettyPrint;
    using Outline;
    using TokenNames;
    using StandardSpanClasses;
    using Whitespaces;
    using Identifiers;
    using Statements;

    [StartRule]
    syntax CompilationUnit = TopLevelDeclaration* !Any;

    [Identifier]
    token Identifier = !Keyword IdentifierBody;

    [Keyword]
    token Keyword = Name=KeywordToken !IdentifierPartCharacters;

    regex NotAllowedRegularStringLiteralChar = NewLineCharacter | "\"" | "\\" | "'";
    regex SimpleEscapeSequence                = "\\'" | "\\\"" | "\\\\" | "\\0" | "\\a" | "\\b" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v";
    
    regex DecimalDigit                        = ['0'..'9'];
    regex HexDigit                            = ['0'..'9', 'a'..'f', 'A'..'F'];
    regex UnicodeEscapeSequence_u             = "\\u" HexDigit HexDigit HexDigit HexDigit;
    regex UnicodeEscapeSequence_U             = "\\U" HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit;
    regex UnicodeEscapeSequence               = UnicodeEscapeSequence_u | UnicodeEscapeSequence_U;
    regex HexadecimalEscapeSequence           = "\\x" HexDigit HexDigit? HexDigit? HexDigit?;

    token RegularStringLiteralPart
    {
      | SimpleEscapeSequenceStrPart           = SimpleEscapeSequence;
      | UnicodeEscapeSequenceStrPart          = UnicodeEscapeSequence;
      | HexadecimalEscapeSequenceStrPart      = HexadecimalEscapeSequence;
      | RegularStringLiteralCharacterSequence = (!NotAllowedRegularStringLiteralChar Any)+;
    }

    [SpanClass(String)]
    token AsciiStringLiteral = "\"" RegularStringLiteralPart* "\"";
    [SpanClass(String)]
    token AnsiStringLiteral = "'" RegularStringLiteralPart* "'";

    regex KeywordToken =   "echo" | "unless"
                         | "class" | "function"
                         | NullLiteral;

    regex GreekSemicolonQuestionThing = ";";
    regex ParameterPrefix = "€";
    regex BooleanLiteral = "true" | "false";
    regex NullLiteral = "null" | "Nothing" | "undefined" | "nada" | "Empty" | "default";

    alias Name = Identifier;
    alias BooleanExpression = Expression;

    syntax ThisAccess = ParameterPrefix "this";

    syntax Expression
    {
      | BooleanLiteral;
      | NullLiteral;
      | FunctionParameter;
      
      | AsciiStringLiteral;
      | AnsiStringLiteral;


      | Equal = Expression sm "==" sm Expression precedence 90;
      | NotEqual = Expression sm "!=" sm Expression precedence 90;

      | Assignment = Expression sm "="  sm Expression precedence  10 right-associative;

      | ThisAccess;
      | MemberAccess = ThisAccess "->" Name;
    }

    syntax TopLevelDeclaration
    {
      | Class  = "class" sm Name ":" TypeBody;
    }

    syntax TypeBody = outline_begin_before inl ClassMemberDeclaration* d nl outline_end_before;
    
    syntax ClassMemberDeclaration
    {
      | Function      = Modifiers "function" FunctionHeader Body;
      | Constructor   = Modifiers "function" sm "__construct" " (" FunctionParameters? ")" Body;
    }

    syntax FunctionHeader = sm Name "(" FunctionParameters? ")";

    syntax FunctionParameter  = ParameterPrefix Name;
    syntax FunctionParameters = FunctionParameter ("," sm FunctionParameter)*;

    syntax Body
    {
      | Block = outline_begin_before inl Statement* d GreekSemicolonQuestionThing? nl outline_end_before;
      | Empty = inl GreekSemicolonQuestionThing nl;
    }

    syntax ArgumentList = (Argument; ","sm)*;
    syntax Argument = Expression;

    syntax Statement
    {
      | Expression = Expression GreekSemicolonQuestionThing nl;
      | Echo = "echo" sm ArgumentList;
      | Exception = HaltAndCatchFire;
    }

    syntax HaltAndCatchFire = Space Space "HALT_AND_CATCH_FIRE" inl "(" "unless" sm BooleanExpression ")" nl;

    syntax Modifiers = Modifier*;

    syntax Modifier
    {
      | Public    = "public"sm;
    }
  }
}
